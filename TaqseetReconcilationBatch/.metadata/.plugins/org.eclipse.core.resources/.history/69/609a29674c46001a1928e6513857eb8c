package com.reconcile;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

/**
 * @author RetailOMatric This class is to do database operation
 */
public class DBManager {

	private static DBManager dbManager;
	static Logger logger = Logger.getLogger(DBManager.class);

	private DBManager() {
	}

	public static DBManager getInstance() {
		if (dbManager == null) {
			dbManager = new DBManager();
		}
		return dbManager;
	}

	public Connection getConection() {
		Connection con = null;
		PosServiceUtil util = new PosServiceUtil();
		StringBuilder jdbcUrl = new StringBuilder();
		jdbcUrl.append("jdbc:oracle:thin:@");
		jdbcUrl.append(util.getProperty("db.host") + ":");
		jdbcUrl.append(util.getProperty("db.port") + ":");
		jdbcUrl.append(util.getProperty("db.name"));
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			// "jdbc:oracle:thin:@localhost:1521:xe"
			con = DriverManager.getConnection(jdbcUrl.toString(), util.getProperty("db.username"),
					util.getProperty("db.password"));
		} catch (ClassNotFoundException | SQLException e) {
			logger.error(e.getCause());
		}
		return con;
	}

	public List<CancelledTransactionDAO> getCancelledTransactionByDate() {

		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();
		StringBuilder selectClause = this.readingSql("GetCancelledTransaction.sql");
		StringBuilder whereClause = new StringBuilder();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String date = simpleDateFormat.format(new Date());
		whereClause.append(" AND trn.DC_DY_BSN= '" + date + "'");
		String sql = selectClause.append(whereClause.toString()).toString();
		logger.info("Executing query: " + sql);
		cancelledTransactions = executeQuery(sql);
		return cancelledTransactions;
	}

	public List<CancelledTransactionDAO> getCancelledTransactionByTrans(String filePath) {

		StringBuilder selectClause = this.readingSql("GetCancelledTransaction.sql");
		StringBuilder whereClause = new StringBuilder();
		whereClause.append("and uec.RET_REF_NUM in (");
		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();

		StringBuilder inCluase = new StringBuilder();
		File valuesForInClause = new File(filePath);
		if (valuesForInClause.exists()) {
			try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
				String barcode = reader.readLine();
				while (barcode != null) {
					inCluase.append("'" + barcode + "',");
					barcode = reader.readLine();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			logger.error("File not found in the given path: " + filePath);
		}
		whereClause.append(inCluase.substring(0, inCluase.length() - 1).toString() + ")");

		String sql = selectClause.append(whereClause.toString()).toString();
		logger.info("Executing query: " + sql);
		cancelledTransactions = executeQuery(sql);
		return cancelledTransactions;
	}

	public List<CancelledTransactionDAO> getMissedCancelledTransactionByTrans() {

		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();
		StringBuilder selectClause = this.readingSql("GetCancelledTransaction.sql");
		cancelledTransactions = executeQuery(selectClause.toString());
		return cancelledTransactions;
	}

	public void updateStatusOfReversTransaction(String reatailRefNo) {

		String updateStatement = "UPDATE UEC_TR_LTM_TAQSEET_TNDR_DTL SET rcn_status    = 'Y' WHERE ret_ref_num = ?";
		try (Connection conn = dbManager.getConection();
				PreparedStatement stmt = conn.prepareStatement(updateStatement)) {
			stmt.setString(1, reatailRefNo);
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public List<CancelledTransactionDAO> executeQuery(String sql) {

		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();
		DBManager dbManager = DBManager.getInstance();
		ResultSet rs = null;
		try (Connection conn = dbManager.getConection(); Statement stmt = conn.createStatement()) {
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				CancelledTransactionDAO cancelledTrans = new CancelledTransactionDAO();

				cancelledTrans.setRetailRefNo(rs.getString("retailRefNo"));
				cancelledTrans.setRefNo(rs.getString("refNo"));
				cancelledTrans.setCivilId(rs.getString("civilId"));
				cancelledTrans.setReverseAmt(Double.parseDouble(rs.getString("amount")));
				cancelledTrans.setOtp(Integer.parseInt(rs.getString("otp")));
				cancelledTransactions.add(cancelledTrans);
			}
			logger.info("DB Connection created: " + conn);
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException sqlEx) {
				}
				rs = null;

			}
		}
		return cancelledTransactions;
	}
	
	
	public List<CancelledTransactionDAO> executeQueryFor(String sql) {

		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();
		DBManager dbManager = DBManager.getInstance();
		ResultSet rs = null;
		try (Connection conn = dbManager.getConection(); Statement stmt = conn.createStatement()) {
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				CancelledTransactionDAO cancelledTrans = new CancelledTransactionDAO();

				cancelledTrans.setRetailRefNo(rs.getString("retailRefNo"));
				cancelledTrans.setRefNo(rs.getString("refNo"));
				cancelledTrans.setCivilId(rs.getString("civilId"));
				cancelledTrans.setReverseAmt(Double.parseDouble(rs.getString("amount")));
				cancelledTrans.setOtp(Integer.parseInt(rs.getString("otp")));
				cancelledTransactions.add(cancelledTrans);
			}
			logger.info("DB Connection created: " + conn);
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException sqlEx) {
				}
				rs = null;

			}
		}
		return cancelledTransactions;
	}
	

	public StringBuilder readingSql(String queryName) {

		InputStream inputStream = DBManager.class.getResourceAsStream("/"+queryName);
		ByteArrayOutputStream result = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int length;
		try {
			while ((length = inputStream.read(buffer)) != -1) {
				result.write(buffer, 0, length);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new StringBuilder(result.toString());

	}

}
