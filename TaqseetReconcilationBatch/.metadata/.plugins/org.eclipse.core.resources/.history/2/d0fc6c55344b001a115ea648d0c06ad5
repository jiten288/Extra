package com.reconcile;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * @author RetailOMatrix This class is created to handle the web service calls
 *
 */
@SuppressWarnings("deprecation")
public class PosServiceUtil {

	static Logger logger = Logger.getLogger(PosServiceUtil.class);

	public org.json.simple.JSONObject callPosService(String serviceURL, String requestBody) {
		try {
			HttpURLConnection conn;

			conn = APIConfig(serviceURL);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json; utf-8");
			conn.setRequestProperty("Accept", "application/json");
			conn.setDoOutput(true);

			if (requestBody != null) {
				try (OutputStream os = conn.getOutputStream()) {
					byte[] input = requestBody.getBytes("utf-8");
					os.write(input, 0, input.length);
				}
			}

			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Client - Request Failed -  HTTP error code : " + conn.getResponseCode());
			} else {
				try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {

					org.json.simple.JSONObject response = (org.json.simple.JSONObject) new JSONParser().parse(br);
					logger.info(response.toString());
					return response;
				} catch (Exception e) {

				}
			}
			conn.disconnect();

		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public static HttpURLConnection APIConfig(String serviceUrl) throws IOException {

		URL url = new URL(serviceUrl);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setDoOutput(true);
		conn.setRequestProperty("Authorization", "NoAuth");
		conn.setRequestProperty("Content-Type", "application/json; charset=utf8");
		conn.setRequestProperty("Accept", "application/json");
		return conn;
	}

	public Boolean getTransactionStatus(String retailRefNo) {
		try {
			logger.info("Calling getTransactionStatus service : " + retailRefNo);
			StringBuilder url = new StringBuilder();
			url.append(this.getProperty("service.host"));
			url.append(this.getProperty("transactionStatus.endpoint"));
			url.append("/" + retailRefNo);
			url.append("/" + this.getProperty("apiKey"));

			org.json.simple.JSONObject response = this.callPosService(url.toString(), null);
			if (response != null) {
				org.json.simple.JSONArray data = (org.json.simple.JSONArray) response.get("Data");

				if (data != null && data.size() > 0) {
					String storeRefNo = ((String) ((org.json.simple.JSONObject) data.get(0)).get("STORE_REF_NUM"));
					if (storeRefNo != null && storeRefNo.equalsIgnoreCase(retailRefNo)) {
						return true;
					}
				} else {
					return false;
				}
			}
			return true;
		} catch (JSONException e) {
			e.printStackTrace();
			return false;
		}

	}

	public void callPostTransactionReversal(CancelledTransactionDAO cancelTrans, String method) {

		try {
			logger.info("Calling PostTransactionReversal service...............");
			String serviceURL = this.getProperty("service.host") + this.getProperty("posttransactionreversal.endpoint");
			JSONObject json = new JSONObject();
			json.put("requestData", getRequestData(cancelTrans));
			json.put("mobileNumber", cancelTrans.getCivilId());
			json.put("reverseAmount", cancelTrans.getReverseAmt());
			json.put("otp", cancelTrans.getOtp());
			json.put("refNumber", cancelTrans.getRetailRefNo());
			org.json.simple.JSONObject response = this.callPosService(serviceURL, json.toString());
			if (response != null) {
				org.json.simple.JSONArray data = (org.json.simple.JSONArray) response.get("Data");

				if (data != null && data.size() > 0) {
					String status = ((String) ((org.json.simple.JSONObject) data.get(0)).get("Status"));
					if (status != null && status.equalsIgnoreCase("0")
							&& (method.equalsIgnoreCase(ReconcileBatchConstants.TRANS)
									|| method.equalsIgnoreCase(ReconcileBatchConstants.DATE))) {
						DBManager dbManager = DBManager.getInstance();
						dbManager.updateStatusOfReversTransaction(cancelTrans.getRetailRefNo());
					}
				}
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}

	}

	public String getProperty(String key) {

		Properties prop = new Properties();
		try {
			prop.load(PosServiceUtil.class.getClass().getResourceAsStream("/application.properties"));
		} catch (IOException e) {

			e.printStackTrace();
		}

		return prop.getProperty(key);
	}

	public PosRequestDAO getRequestData(CancelledTransactionDAO cancelTrans) {
		PosRequestDAO requestDAO = new PosRequestDAO();
		requestDAO.setApiKey(this.getProperty("apiKey"));
		requestDAO.setBusinesDate(cancelTrans.getBusinesDate());
		requestDAO.setRegisterId(cancelTrans.getRegisterId());
		requestDAO.setStoreId(cancelTrans.getStoreId());
		requestDAO.setTransactionId(cancelTrans.getTransactionId());

		return requestDAO;
	}

	public void generateCancelledTransFile(List<CancelledTransactionDAO> cancelledTrans) {

		File missingTransctions = new File(System.getProperty("user.dir") + System.getProperty("file.separator"),
				"MissingTransactions.txt");

		try {

			if (missingTransctions.exists()) {
				missingTransctions.delete();
				missingTransctions.createNewFile();
			} else {
				missingTransctions.createNewFile();
			}

			for (CancelledTransactionDAO cancelledTransaction : cancelledTrans) {
				StringBuilder missingTransDetail = new StringBuilder();
				missingTransDetail.append(cancelledTransaction.getBusinesDate());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getStoreId());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getRegisterId());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getTransactionId());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getCivilId());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getRetailRefNo());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getRefNo());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getOtp());
				missingTransDetail.append("|");
				missingTransDetail.append(cancelledTransaction.getReverseAmt());
				missingTransDetail.append(System.getProperty("line.separator"));
				Files.write(missingTransctions.toPath(), missingTransDetail.toString().getBytes(),
						StandardOpenOption.APPEND);

			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
	public List<CancelledTransactionDAO> getCancelledTransDetails(){
		
		File missingTransctions = new File(System.getProperty("user.dir") + System.getProperty("file.separator"), "MissingTransactions.txt");
		List<CancelledTransactionDAO> cancelledTransactions = new ArrayList<CancelledTransactionDAO>();
		if (missingTransctions.exists()) {
		
		LineNumberReader lineNumberReader = null;
	      try
	      {
	         lineNumberReader = new LineNumberReader(new FileReader(missingTransctions));
	         String line = null;
	         while ((line = lineNumberReader.readLine()) != null)
	         {
	           String[] transDetail = line.split("|");
	           try{
	           CancelledTransactionDAO cancelledTrans = new CancelledTransactionDAO();
	           cancelledTrans.setBusinesDate(transDetail[Integer.parseInt(this.getProperty("file.position.businessDate"))]);
	           cancelledTrans.setStoreId(transDetail[Integer.parseInt(this.getProperty("file.position.storeId"))]);
	           cancelledTrans.setRegisterId(transDetail[Integer.parseInt(this.getProperty("file.position.regId"))]);
	           cancelledTrans.setTransactionId(Integer.parseInt(transDetail[Integer.parseInt(this.getProperty("file.position.transId"))]));
	           cancelledTrans.setCivilId(transDetail[Integer.parseInt(this.getProperty("file.position.civilId"))]);
	           cancelledTrans.setRetailRefNo(transDetail[Integer.parseInt(this.getProperty("file.position.retailRefNo"))]);
	           cancelledTrans.setReverseAmt(Double.parseDouble(transDetail[Integer.parseInt(this.getProperty("file.position.amount"))]));
	           cancelledTrans.setOtp(Integer.parseInt(transDetail[Integer.parseInt(this.getProperty("file.position.otp"))]));
	           cancelledTrans.setRefNo(transDetail[Integer.parseInt(this.getProperty("file.position.refNo"))]);
	           cancelledTransactions.add(cancelledTrans);
	           }catch(NumberFormatException ex){
	        	   logger.error(ex.toString());
	           }
	         }
	         
	      } 
	      catch (Exception ex)
	      {
	         ex.printStackTrace();
	      } finally
	      {
	         try {
	            if (lineNumberReader != null){
	               lineNumberReader.close();
	            }
	         } catch (IOException ex){
	            ex.printStackTrace();
	         }
	      }
	   }
	 else {
		logger.error("File not found.");
		
	}
		return cancelledTransactions;
		
	}
	
}
